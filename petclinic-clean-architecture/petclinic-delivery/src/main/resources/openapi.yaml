openapi: 3.0.1
info:
  version: 1.0.0
  title: lemonhc petclinic sample application
paths:
  /owners:
    post:
      tags:
        - owner
      operationId: addOwner
      summary: Adds a pet owner
      description: Records the details of a new pet owner.
      requestBody:
        description: The pet owner
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerFields'
        required: true
      responses:
        '201':
          description: The pet owner was sucessfully added.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Owner'
        '400':
          description: Bad request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
    get:
      tags:
        - owner
      operationId: listOwners
      summary: Lists pet owners
      description: Returns an array of pet owners.
      parameters:
        - name: lastName
          in: query
          description: Last name.
          required: false
          schema:
            type: string
            example: Davis
      responses:
        '200':
          description: Owner details found and returned.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Owner'
        '304':
          description: Not modified.
          headers:
            ETag:
              description: An ID for this version of the response.
              schema:
                type: string
        '500':
          description: Server error.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RestError'
components:
  schemas:
    Owner:
      title: Owner
      description: A pet owner.
      allOf:
        - $ref: '#/components/schemas/OwnerFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the pet owner.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            pets:
              title: Pets
              description: The pets owned by this individual including any booked vet visits.
              type: array
              items:
                $ref: '#/components/schemas/Pet'
              readOnly: true
          required:
            - pets
    OwnerFields:
      title: Owner fields
      description: Editable fields of a pet owner.
      type: object
      properties:
        firstName:
          title: First name
          description: The first name of the pet owner.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: George
        lastName:
          title: Last name
          description: The last name of the pet owner.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: Franklin
        address:
          title: Address
          description: The postal address of the pet owner.
          type: string
          minLength: 1
          maxLength: 255
          example: 110 W. Liberty St.
        city:
          title: City
          description: The city of the pet owner.
          type: string
          minLength: 1
          maxLength: 80
          example: Madison
        telephone:
          title: Telephone number
          description: The telephone number of the pet owner.
          type: string
          minLength: 1
          maxLength: 20
          pattern: '^[0-9]*$'
          example: '6085551023'
      required:
        - firstName
        - lastName
        - address
        - city
        - telephone
    Pet:
      title: Pet type
      description: A pet type.
      allOf:
        - $ref: '#/components/schemas/PetTypeFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the pet type.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
          required:
            - id
    PetFields:
      title: Pet fields
      description: Editable fields of a pet.
      type: object
      properties:
        name:
          title: Name
          description: The name of the pet.
          type: string
          maxLength: 30
          example: Leo
        birthDate:
          title: Birth date
          description: The date of birth of the pet.
          type: string
          format: date
          example: '2010-09-07'
        type:
          $ref: '#/components/schemas/PetType'
      required:
        - name
        - birthDate
        - type
    PetType:
      title: Pet type
      description: A pet type.
      allOf:
        - $ref: '#/components/schemas/PetTypeFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the pet type.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
          required:
            - id
    PetTypeFields:
      title: PetType fields
      description: Editable fields of a pet type.
      type: object
      properties:
        name:
          title: Name
          description: The name of the pet type.
          type: string
          maxLength: 80
          minLength: 1
          example: cat
      required:
        - name
    RestError:
      title: REST Error
      description: The schema for all error responses.
      type: object
      properties:
        status:
          title: Status
          description: The HTTP status code.
          type: integer
          format: int32
          example: 400
          readOnly: true
        error:
          title: Error
          description: The short error message.
          type: string
          example: Bad Request
          readOnly: true
        message:
          title: Message
          description: The long error message.
          type: string
          example: Request failed schema validation
          readOnly: true
      required:
        - status
        - error
        - message
    Specialty:
      title: Specialty
      description: Fields of specialty of vets.
      type: object
      properties:
        id:
          title: ID
          description: The ID of the specialty.
          type: integer
          format: int32
          minimum: 0
          example: 1
          readOnly: true
        name:
          title: Name
          description: The name of the specialty.
          type: string
          maxLength: 80
          minLength: 1
          example: radiology
      required:
        - id
        - name
    Vet:
      title: Vet
      description: A veterinarian.
      allOf:
        - $ref: '#/components/schemas/VetFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the vet.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
      required:
        - id
        - firstName
        - lastName
        - specialties
    VetFields:
      title: VetFields
      description: Editable fields of a veterinarian.
      type: object
      properties:
        firstName:
          title: First name
          description: The first name of the vet.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: James
        lastName:
          title: Last name
          description: The last name of the vet.
          type: string
          minLength: 1
          maxLength: 30
          pattern: '^[a-zA-Z]*$'
          example: Carter
        specialties:
          title: Specialties
          description: The specialties of the vet.
          type: array
          items:
            $ref: '#/components/schemas/Specialty'
      required:
        - firstName
        - lastName
        - specialties
    Visit:
      title: Visit
      description: A booking for a vet visit.
      allOf:
        - $ref: '#/components/schemas/VisitFields'
        - type: object
          properties:
            id:
              title: ID
              description: The ID of the visit.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
            petId:
              title: Pet ID
              description: The ID of the pet.
              type: integer
              format: int32
              minimum: 0
              example: 1
              readOnly: true
          required:
            - id
    VisitFields:
      title: Visit fields
      description: Editable fields of a vet visit.
      type: object
      properties:
        date:
          title: Date
          description: The date of the visit.
          type: string
          format: date
          example: '2013-01-01'
        description:
          title: Description
          description: The description for the visit.
          type: string
          minLength: 1
          maxLength: 255
          example: rabies shot
      required:
        - description

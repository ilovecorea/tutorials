<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  <parent>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-parent</artifactId>
    <version>2.7.8</version>
    <relativePath/> <!-- lookup parent from repository -->
  </parent>

  <groupId>com.example</groupId>
  <artifactId>petclinic-rest-webflux</artifactId>
  <version>0.0.1-SNAPSHOT</version>
  <name>petclinic-rest-webflux</name>
  <description>petclinic-rest-webflux</description>

  <properties>
    <java.version>17</java.version>
    <mapstruct.version>1.5.2.Final</mapstruct.version>
    <docker.image.prefix>lemonhc</docker.image.prefix>
  </properties>

  <dependencies>
    <dependency>
      <groupId>org.projectlombok</groupId>
      <artifactId>lombok</artifactId>
      <version>1.18.24</version>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-actuator</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-webflux</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-security</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-validation</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-r2dbc</artifactId>
    </dependency>
    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-orm</artifactId>
    </dependency>
    <!-- for liquibase -->
    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jdbc</artifactId>
    </dependency>
    <!-- for r2dbc -->
    <dependency>
      <groupId>io.r2dbc</groupId>
      <artifactId>r2dbc-postgresql</artifactId>
      <version>0.8.13.RELEASE</version>
    </dependency>
    <!-- for liquibase -->
    <dependency>
      <groupId>org.postgresql</groupId>
      <artifactId>postgresql</artifactId>
    </dependency>
    <dependency>
      <groupId>org.liquibase</groupId>
      <artifactId>liquibase-core</artifactId>
      <version>4.19.0</version>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct</artifactId>
      <version>${mapstruct.version}</version>
    </dependency>
    <dependency>
      <groupId>org.mapstruct</groupId>
      <artifactId>mapstruct-processor</artifactId>
      <version>${mapstruct.version}</version>
    </dependency>

    <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springframework.security</groupId>
      <artifactId>spring-security-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>io.projectreactor</groupId>
      <artifactId>reactor-test</artifactId>
      <version>3.3.9.RELEASE</version>
    </dependency>
    <dependency>
      <groupId>com.fasterxml.jackson.core</groupId>
      <artifactId>jackson-databind</artifactId>
    </dependency>
    <dependency>
      <groupId>com.jayway.jsonpath</groupId>
      <artifactId>json-path</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.springdoc</groupId>
      <artifactId>springdoc-openapi-webflux-ui</artifactId>
      <version>1.6.14</version>
    </dependency>
    <dependency>
      <groupId>org.openapitools</groupId>
      <artifactId>jackson-databind-nullable</artifactId>
      <version>0.2.4</version>
    </dependency>
    <dependency>
      <groupId>io.projectreactor</groupId>
      <artifactId>reactor-test</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.mockito</groupId>
      <artifactId>mockito-core</artifactId>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>postgresql</artifactId>
      <version>1.17.6</version>
      <scope>test</scope>
    </dependency>
    <dependency>
      <groupId>org.testcontainers</groupId>
      <artifactId>junit-jupiter</artifactId>
      <version>1.17.6</version>
      <scope>test</scope>
    </dependency>
  </dependencies>

  <build>
    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>3.10.1</version>
        <configuration>
          <source>${java.version}</source>
          <target>${java.version}</target>
          <annotationProcessorPaths>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok</artifactId>
              <version>${lombok.version}</version>
            </path>
            <path>
              <groupId>org.mapstruct</groupId>
              <artifactId>mapstruct-processor</artifactId>
              <version>${mapstruct.version}</version>
            </path>
            <path>
              <groupId>org.projectlombok</groupId>
              <artifactId>lombok-mapstruct-binding</artifactId>
              <version>0.1.0</version>
            </path>
          </annotationProcessorPaths>
          <compilerArgs>
            <!-- @Generated 주석에 타임스탬프 생성 제외 -->
            <compilerArg>
              -Amapstruct.suppressGeneratorTimestamp=true
            </compilerArg>
            <!-- @Generated 주석에 comment 속성 제외 -->
            <compilerArg>
              -Amapstruct.suppressGeneratorVersionInfoComment=true
            </compilerArg>
            <!-- 생성된 소스에 @Component 어노테이션이 추가된다 -->
            <compilerArg>
              -Amapstruct.defaultComponentModel=spring
            </compilerArg>
          </compilerArgs>
        </configuration>
      </plugin>

      <!-- 실행 가능한 spring boot application jar 로 패키징 -->
      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
      </plugin>

      <!-- 테스트 커버리지를 측정하고 강제하는 플러그인 -->
      <plugin>
        <groupId>org.jacoco</groupId>
        <artifactId>jacoco-maven-plugin</artifactId>
        <version>0.8.8</version>
        <configuration>
          <excludes>
            <!-- Generated code -->
            <exclude>**/org/example/petclinic/rest/dto/**</exclude>
            <exclude>**/org/example/petclinic/rest/api/**</exclude>
          </excludes>
        </configuration>
        <executions>
          <execution>
            <!-- 테스트 중인 어플리케이션에서 인수를 전달하는 JaCoCo Runtime Agent에 대한 property를 준비 -->
            <goals>
              <goal>prepare-agent</goal>
            </goals>
          </execution>
          <execution>
            <!-- code coverage metric이 충돌하는지 확인 -->
            <id>check</id>
            <goals>
              <goal>check</goal>
            </goals>
            <configuration>
              <rules>
                <rule>
                  <!-- 패키지 번들 타입 -->
                  <element>BUNDLE</element>
                  <limits>
                    <limit>
                      <!-- 커버리지를 측정할 때 사용하는 지표로 빈 줄을 제외한 실제 코드의 라인수를 사용 -->
                      <counter>LINE</counter>
                      <!-- 커버된 비율. 0부터 1사이의 숫자로 1이면 100%를 의미 -->
                      <value>COVEREDRATIO</value>
                      <minimum>0.85</minimum>
                    </limit>
                    <limit>
                      <!-- 커버리지를 측정할 때 사용하는 지표로 조건문 등의 분기 수를 사용 -->
                      <counter>BRANCH</counter>
                      <!-- 커버된 비율. 0부터 1사이의 숫자로 1이면 100%를 의미 -->
                      <value>COVEREDRATIO</value>
                      <minimum>0.66</minimum>
                    </limit>
                  </limits>
                </rule>
              </rules>
            </configuration>
          </execution>
          <execution>
            <!-- 하나의 프로젝트 테스트에 대한 code coverage 리포트를 생성 -->
            <id>report</id>
            <phase>prepare-package</phase>
            <goals>
              <goal>report</goal>
            </goals>
          </execution>
        </executions>
      </plugin>

      <!-- docker or OCI 이미지를 생성하는 플러그인 -->
      <plugin>
        <groupId>com.google.cloud.tools</groupId>
        <artifactId>jib-maven-plugin</artifactId>
        <version>1.3.0</version>
        <configuration>
          <to>
            <!-- 생성할 이미지 이름 -->
            <image>ilovecorea/${docker.image.prefix}/${project.artifactId}</image>
            <tags>
              <tag>${project.version}</tag>
              <tag>latest</tag>
            </tags>
          </to>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.openapitools</groupId>
        <artifactId>openapi-generator-maven-plugin</artifactId>
        <version>6.2.1</version>
        <executions>
          <execution>
            <goals>
              <goal>generate</goal>
            </goals>
            <configuration>
              <inputSpec>${project.basedir}/src/main/resources/openapi.yml</inputSpec>
              <generatorName>spring</generatorName>
              <library>spring-boot</library>

              <!-- Only enabling model andopenapi-generator-maven-plugin API generation -->
              <modelNameSuffix>Dto</modelNameSuffix>
              <apiPackage>com.example.petclinic.rest.api</apiPackage>
              <generateModels>true</generateModels>
              <modelPackage>com.example.petclinic.rest.dto</modelPackage>
              <!--
              <generateSupportingFiles>true</generateSupportingFiles>
              <supportingFilesToGenerate>ApiUtil.java</supportingFilesToGenerate>
              -->
              <generateApis>true</generateApis>
              <configOptions>
                <reactive>true</reactive>
                <!-- RestController implementation is provided by Petclinic developers -->
                <interfaceOnly>true</interfaceOnly>
                <!-- Activating Java 8 features -->
                <performBeanValidation>true</performBeanValidation>
                <!--								<dateLibrary>java8</dateLibrary>-->
                <!--								<java8>true</java8>-->
                <openApiNullable>false</openApiNullable>
                <!-- override the default library to jersey2 -->
                <serializationLibrary>jackson</serializationLibrary>
                <!-- switch documentation provider to springdoc -->
                <documentationProvider>springdoc</documentationProvider>
              </configOptions>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>build-helper-maven-plugin</artifactId>
        <version>3.3.0</version>
        <executions>
          <execution>
            <id>add-source</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>add-source</goal>
            </goals>
            <configuration>
              <sources>
                <source>target/generated-sources/openapi/src/main/java</source>
              </sources>
            </configuration>
          </execution>
        </executions>
      </plugin>
    </plugins>
  </build>

</project>
